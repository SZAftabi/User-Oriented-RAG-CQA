# -*- coding: utf-8 -*-
"""Llama-2 (Recognizing Question Entailment)

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19Xe2U_4tlo6Z2ni-Rfjzwbm_r8ap2nOq
"""

pattern = r",[^,]*?\[INST\]"

DataPath = "PATH/TO/YOUR/DATA"
MyData = pd.read_pickle(DataPath)
MyData = MyData[['body_Q1', 'body_Q2', 'entailment', 'U_Background_kn']]
MyData["U_Background_kn"] = MyData["U_Background_kn"].str.replace(pattern, ",", regex=True).str.strip()
MyData["U_Background_kn"] = MyData["U_Background_kn"].str.replace(r"#", "", regex=True)
MyData = MyData.rename(columns={'body_Q1': 'q1', 'body_Q2': 'q2'})
MyData["q1"] = MyData["q1"].str.replace(r"^\s*Possible Duplicate:\s+.*?\s{2,}(.*)$", r"\1", regex=True)
MyData["q2"] = MyData["q2"].str.replace(r"^\s*Possible Duplicate:\s+.*?\s{2,}(.*)$", r"\1", regex=True)
MyData["q1"] = MyData["q1"].str.replace("C#", "C", regex=False)
MyData["q1"] = MyData["q1"].str.replace(r"#", "", regex=True)
MyData["q1"] = MyData["q1"].str.replace(r"\n", " ", regex=True)
MyData["q2"] = MyData["q2"].str.replace("C#", "C", regex=False)
MyData["q2"] = MyData["q2"].str.replace(r"#", "", regex=True)
MyData["q2"] = MyData["q2"].str.replace(r"\n", " ", regex=True)
MyData["entailment"] = MyData["entailment"].str.replace("Not-entailed", "negative", regex=False)
MyData["entailment"] = MyData["entailment"].str.replace("Entailed", "positive", regex=False)


DataPath = "PATH/TO/YOUR/DATA"
ValData2 = pd.read_pickle(DataPath)
ValData = ValData2[['body_Q1', 'body_Q2', 'entailment', 'U_Background_kn']]
ValData["U_Background_kn"] = ValData["U_Background_kn"].str.replace(pattern, ",", regex=True).str.strip()
ValData["U_Background_kn"] = ValData["U_Background_kn"].str.replace(r"#", "", regex=True)
ValData = ValData.rename(columns={'body_Q1': 'q1', 'body_Q2': 'q2'})
ValData["q1"] = ValData["q1"].str.replace(r"^\s*Possible Duplicate:\s+.*?\s{2,}(.*)$", r"\1", regex=True)
ValData["q2"] = ValData["q2"].str.replace(r"^\s*Possible Duplicate:\s+.*?\s{2,}(.*)$", r"\1", regex=True)
ValData["q1"] = ValData["q1"].str.replace("C#", "C", regex=False)
ValData["q1"] = ValData["q1"].str.replace(r"#", "", regex=True)
ValData["q1"] = ValData["q1"].str.replace(r"\n", " ", regex=True)
ValData["q2"] = ValData["q2"].str.replace("C#", "C", regex=False)
ValData["q2"] = ValData["q2"].str.replace(r"#", "", regex=True)
ValData["q2"] = ValData["q2"].str.replace(r"\n", " ", regex=True)
ValData["entailment"] = ValData["entailment"].str.replace("Not-entailed", "negative", regex=False)
ValData["entailment"] = ValData["entailment"].str.replace("Entailed", "positive", regex=False)
ValData = ValData.sample(frac=1, random_state=42).reset_index(drop=True)
ValData = ValData.head(500)


DataModule = RQEDataModule(MyData, ValData, MyModel.tokenizer, script_args)
MyModel = RQEModel(script_args)
logger = TensorBoardLogger(script_args.output_dir + 'logs', name="RQE")

trainer = pl.Trainer(
    logger = logger,
    log_every_n_steps = script_args.logging_steps,
    max_epochs = script_args.max_epochs,
    accumulate_grad_batches = script_args.gradient_accumulation_steps,
    num_sanity_val_steps = script_args.num_sanity_val_steps,
    callbacks = [OverrideEpochStepCallback()],
    default_root_dir= script_args.output_dir + 'Checkpoints',
    val_check_interval= 2000,
    enable_checkpointing=False,
    )

trainer.fit(MyModel, datamodule=DataModule)